#!/usr/bin/python# -*- coding: utf-8 -*-import pytest# DUT: Device Under Test.from StoreItem import *# Get the Promotion Type categories.from DataCleanse import *## Want to make sure can convert date formats to Australian format.#class TestDateFormats(object):    #    # Create the Device Under Test (DUT).    #    def setup_method(self, method):        self.dut = StoreItem()    #    # Perform any necessary clean-up.    #    def teardown_method(self, method):        pass    ##############    # Test-Cases #    ##############    def test_yyyy_minus_mm_minus_dd(self):        # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = "2001-12-30"        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = "30/12/2001"        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_yyyy_minus_mm_minus_dd_T_time(self):               # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = "2001-12-30T01:02:03-04:05"        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = "30/12/2001"        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_valid_start_date(self):               # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = "Valid Start Date"        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = "Valid Start Date"        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_valid_end_date(self):               # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = "Valid End Date"        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = "Valid End Date"        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_blank(self):               # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = ""        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = ""        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_dd_slash_mm_slash_yy(self):        # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = "11/06/01"        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = "11/06/2001"        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_dd_slash_mm_slash_yyyy(self):        # Input and expected result.        test_input_title = "test title"        test_input_description = "test description"        test_input_price = "99.99"        test_input_date = "11/06/2017"        test_expected_price_cleansed = float(99.99)        test_expected_multibuy = ""        test_expected_promotion_type = PRICE_REDUCTION        test_expected_title_cleansed = "Test Title Test Description"        test_expected_date = "11/06/2017"        # Perform the test        self.dut.mTitle = test_input_title        self.dut.mDescription = test_input_description        self.dut.mPrice = test_input_price        self.dut.mStartDate = test_input_date        self.dut.mEndDate = test_input_date        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date    def test_set_to_blank(self):        # Input and expected result.        test_expected_price_cleansed = float(0.0)        test_expected_multibuy = ""        test_expected_promotion_type = ""        test_expected_title_cleansed = (BLANK + " " + BLANK).title()        test_expected_date = ""        # Perform the test        self.dut.setToBlank()        # Perform the cleanse.        self.dut.cleanse()        # Verify the results.        assert self.dut.mTitleCleansed == test_expected_title_cleansed        assert self.dut.mPriceCleansed == test_expected_price_cleansed        assert self.dut.mMultibuy == test_expected_multibuy        assert self.dut.mPromotionType == test_expected_promotion_type        assert self.dut.mStartDate == test_expected_date        assert self.dut.mEndDate == test_expected_date